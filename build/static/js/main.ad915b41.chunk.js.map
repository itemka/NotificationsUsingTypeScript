{"version":3,"sources":["components/Message/Message.module.css","components/Buttom/Button.tsx","components/Message/Message.tsx","Redux/Reducer.tsx","App.tsx","serviceWorker.ts","Redux/state.tsx","index.tsx"],"names":["module","exports","Button","props","className","style","onClick","callback","nameButton","Message","css","buttonSuccess","title","text","initialState","notificationArray","Reducer","state","action","type","id","types","filter","item","App","onClickButtonSuccess","AddNotificationThunk","onClickButtonWarning","onClickButtonError","notification","this","map","key","Component","connect","partStore","dispatch","getState","arrayLength","min","max","rand","Math","random","round","randomInteger","addObjectOfNotification","setTimeout","filterArray","Boolean","window","location","hostname","match","CombineReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,cAAgB,iC,yMCanBC,G,MANA,SAACC,GACZ,OACI,4BAAQC,UAAWD,EAAME,MAAOC,QAASH,EAAMI,UAAWJ,EAAMK,c,iBCQzDC,EATC,SAACN,GACb,OACI,yBAAKC,UAAS,UAAKM,IAAIC,cAAT,YAA0BR,EAAME,QAC1C,6BAAMF,EAAMS,OACZ,6BAAMT,EAAMU,Q,+kBC4BjB,IAoBHC,EAAyB,CACzBC,kBAAmB,IA8BRC,EA1BC,WAA2F,IAA1FC,EAAyF,uDAAvEH,EAAcI,EAAyD,uCACtG,OAAQA,EAAOC,MACX,IAhEwB,6BAiEpB,OAAO,EAAP,GACOF,EADP,CAEIF,kBAAkB,GAAD,mBACVE,EAAMF,mBADI,CAEb,CACIK,GAAIF,EAAOE,GACXR,MAAOM,EAAON,MACdC,KAAMK,EAAOL,KACbQ,MAAOH,EAAOG,WAI9B,IA5EU,eA6EN,OAAO,EAAP,GACOJ,EADP,CAEIF,kBAAkB,YAAKE,EAAMF,kBAAkBO,QAAO,SAAAC,GAAI,OAAIA,EAAKH,KAAOF,EAAOE,SAEzF,QACI,OAAOH,IC1EbO,E,2MAEFC,qBAAuB,kBAAM,EAAKtB,MAAMuB,qBAAX,iC,EAC7BC,qBAAuB,kBAAM,EAAKxB,MAAMuB,qBAAX,iC,EAC7BE,mBAAqB,kBAAM,EAAKzB,MAAMuB,qBAAX,6B,wEAGvB,IAAIG,EAAeC,KAAK3B,MAAMY,kBAAkBgB,KAAI,SAAAR,GAAI,OAAI,kBAAC,EAAD,CAASS,IAAKT,EAAKH,GAAIf,MAAK,UAAKkB,EAAKF,OAC7BT,MAAK,UAAKW,EAAKX,OACfC,KAAI,UAAKU,EAAKV,WACnF,OACI,yBAAKT,UAAU,OACX,kBAAC,EAAD,CAAQC,MAAK,uBAA0BE,SAAUuB,KAAKL,qBAAsBjB,WAAY,YACxF,kBAAC,EAAD,CAAQH,MAAK,uBAA0BE,SAAUuB,KAAKH,qBAAsBnB,WAAY,YACxF,kBAAC,EAAD,CAAQH,MAAK,qBAAwBE,SAAUuB,KAAKF,mBAAoBpB,WAAY,UAEpF,yBAAKJ,UAAS,qBACTyB,Q,GAjBHI,aAyBHC,eADS,SAACjB,GAAD,MAAuB,CAACF,kBAAmBE,EAAMkB,UAAUpB,qBAC3C,CAACW,qBDGL,SAACd,EAAeC,EAAcM,GAA9B,OAChC,SAACiB,EAA4CC,GAEzC,IAhByBjB,EAgBrBkB,EATZ,SAAuBC,EAAaC,GAChC,IAAIC,EAAOF,EAAM,GAAMG,KAAKC,UAAYH,EAAMD,EAAM,GACpD,OAAOG,KAAKE,MAAMH,GAOII,CAA8B,GAAhBH,KAAKC,SAAe,gBACpDP,EA9BwB,SAAChB,EAAYR,EAAeC,EAAcQ,GAA1C,MAA6D,CACzFF,KAZ4B,6BAa5BC,KAAIR,QAAOC,OAAMQ,SA4BJyB,CAAwBR,EAAa1B,EAAOC,EAAMM,IAC3DiB,GAlByBhB,EAkBQkB,EAlB6C,SAACF,GACnFW,YAAW,WACPX,EALY,SAAChB,GAAD,MAAiB,CAACD,KApBpB,eAoBwCC,MAKzC4B,CAAY5B,MACtB,WCOQc,CAAiDV,GC1B5CyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCVAC,EAAiBC,YAAgB,CACnCpB,UAAWnB,IAIAwC,EADDC,YAAYH,EAAgBI,YAAgBC,MCJ1DC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OACSM,SAASC,eAAe,SF8HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad915b41.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSuccess\":\"Message_buttonSuccess__3zwF9\"};","import React from 'react';\n\ninterface IProps {\n    nameButton: string,\n    style: string,\n    callback: ()=> void,\n}\n\nconst Button = (props: IProps) => {\n    return (\n        <button className={props.style} onClick={props.callback}>{props.nameButton}</button>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport css from './Message.module.css';\n\ninterface IMessage {\n    title: string,\n    text: string,\n    style: string,\n}\n\nconst Message = (props: IMessage) => {\n    return (\n        <div className={`${css.buttonSuccess} ${props.style}`}>\n            <div>{props.title}</div>\n            <div>{props.text}</div>\n        </div>\n    );\n};\n\nexport default Message;\n","import {AnyAction} from \"redux\";\nimport {IAppStore} from \"./state\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\n\nconst ADD_OBJECT_OF_NOTIFICATION = `ADD_OBJECT_OF_NOTIFICATION`;\nconst FILTER_ARRAY = `FILTER_ARRAY`;\n\ninterface INewObjNotification {\n    type: typeof ADD_OBJECT_OF_NOTIFICATION,\n    id: number,\n    title: string,\n    text: string,\n    types: \"Success\" | \"Warning\" | \"Error\",\n}\n\nconst addObjectOfNotification = (id: number, title: string, text: string, types: string) => ({\n    type: ADD_OBJECT_OF_NOTIFICATION,\n    id, title, text, types,\n});\n\ninterface IFilterArray {\n    type: typeof FILTER_ARRAY,\n    id: number\n}\n\nconst filterArray = (id: number) => ({type: FILTER_ARRAY, id});\n\n\nconst elementArrayDeleteThunk = (id: number): ThunkAction<void, {}, {}, AnyAction> => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    setTimeout(() => {\n        dispatch(filterArray(id));\n    }, 2000)\n};\n\n\nfunction randomInteger(min: number, max: number) {\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\n    return Math.round(rand);\n}\n\n\nexport const AddNotificationThunk = (title: string, text: string, type: string): ThunkAction<void, IAppStore, {}, AnyAction> =>\n    (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => IAppStore) => {\n        //let arrayLength = getState().partStore.notificationArray.length + 1;\n        let arrayLength = randomInteger(Math.random() * 10, 99999999999999);\n        dispatch(addObjectOfNotification(arrayLength, title, text, type));\n        dispatch(elementArrayDeleteThunk(arrayLength));\n    };\n\n\nexport interface IObjectNotification {\n    id: number,\n    title: string,\n    text: string,\n    types: \"Success\" | \"Warning\" | \"Error\",\n}\n\nexport interface IMyState {\n    notificationArray: Array<IObjectNotification>\n}\n\nlet initialState: IMyState = {\n    notificationArray: [],\n};\n\n\nconst Reducer = (state: IMyState = initialState, action: INewObjNotification | IFilterArray): IMyState => {\n    switch (action.type) {\n        case ADD_OBJECT_OF_NOTIFICATION:\n            return {\n                ...state,\n                notificationArray: [\n                    ...state.notificationArray,\n                    {\n                        id: action.id,\n                        title: action.title,\n                        text: action.text,\n                        types: action.types\n                    }\n                ]\n            };\n        case FILTER_ARRAY:\n            return {\n                ...state,\n                notificationArray: [...state.notificationArray.filter(item => item.id !== action.id)]\n            };\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default Reducer;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Button from './components/Buttom/Button';\nimport Message from \"./components/Message/Message\";\nimport {IAppStore} from \"./Redux/state\";\nimport {connect} from \"react-redux\";\nimport {AddNotificationThunk, IObjectNotification} from \"./Redux/Reducer\";\n\ninterface IObjectOfProps {\n    AddNotificationThunk: (title: string, text: string, types: string) => void;\n    notificationArray: Array<IObjectNotification>\n}\n\nclass App extends Component<IObjectOfProps> {\n\n    onClickButtonSuccess = () => this.props.AddNotificationThunk(`Success`, `someText`, `Success`);\n    onClickButtonWarning = () => this.props.AddNotificationThunk(`Warning`, `someText`, `Warning`);\n    onClickButtonError = () => this.props.AddNotificationThunk(`Error`, `someText`, `Error`);\n\n    render() {\n        let notification = this.props.notificationArray.map(item => <Message key={item.id} style={`${item.types}`}\n                                                                             title={`${item.title}`}\n                                                                             text={`${item.text}`}/>);\n        return (\n            <div className=\"App\">\n                <Button style={`buttonSuccess button`} callback={this.onClickButtonSuccess} nameButton={'Success'}/>\n                <Button style={`buttonWarning button`} callback={this.onClickButtonWarning} nameButton={'Warning'}/>\n                <Button style={`buttonError button`} callback={this.onClickButtonError} nameButton={'Error'}/>\n\n                <div className={`NotificationBlock`}>\n                    {notification}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: IAppStore) => ({notificationArray: state.partStore.notificationArray});\nexport default connect(mapStateToProps, {AddNotificationThunk})(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport Reducer, {IMyState} from \"./Reducer\";\n\nexport interface IAppStore {\n    partStore: IMyState\n}\n\nconst CombineReducer = combineReducers({\n    partStore: Reducer,\n});\n\nconst store = createStore(CombineReducer, applyMiddleware(thunkMiddleware));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/state\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}